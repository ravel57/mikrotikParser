plugins {
	id 'groovy'
	id 'war'
	id 'org.springframework.boot' version '3.1.5'
	id 'io.spring.dependency-management' version '1.1.3'
}

group = 'ru.ravel'
version = '1'

java {
	sourceCompatibility = '17'
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.apache.groovy:groovy'

	implementation 'org.springframework.boot:spring-boot-starter-data-jdbc'
	implementation 'org.springframework.boot:spring-boot-starter-jdbc'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.session:spring-session-jdbc'
	implementation 'org.springframework.boot:spring-boot-starter-data-rest'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-web-services'
//	implementation 'org.springframework.boot:spring-boot-starter-webflux'
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'

	implementation 'javax.xml.bind:jaxb-api:2.3.0'


	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	implementation 'org.postgresql:postgresql'

	implementation 'me.legrange:mikrotik:3.0.7'

	providedRuntime 'org.springframework.boot:spring-boot-starter-tomcat'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'

	implementation 'org.hibernate:hibernate-core:6.4.4.Final'

}

tasks.named('test') {
	useJUnitPlatform()
}

jar {
	duplicatesStrategy = DuplicatesStrategy.EXCLUDE

	manifest {
		attributes "Main-Class": "ru.ravel.mikrotikparcer.MikrotikParserApplication"
	}
	from {
		configurations.runtimeClasspath.collect {
			it.isDirectory() ? it : zipTree(it)
		}
	}
}

war {
	duplicatesStrategy = DuplicatesStrategy.EXCLUDE

	manifest {
		attributes "Main-Class": "ru.ravel.mikrotikparcer.MikrotikParserApplication"
	}
	from {
		configurations.runtimeClasspath.collect {
			it.isDirectory() ? it : zipTree(it)
		}
	}
}